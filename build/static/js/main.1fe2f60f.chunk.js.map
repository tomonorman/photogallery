{"version":3,"sources":["firebase/config.js","hooks/useFirestore.js","comps/ImageGrid.js","comps/Modal.js","comps/Title.js","hooks/useStorage.js","comps/ProgressBar.js","comps/UploadForm.js","App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","projectStorage","storage","projectFirestore","firestore","timestamp","FieldValue","serverTimestamp","useFirestore","collection","useState","docs","setDocs","useEffect","unsub","orderBy","onSnapshot","snap","documents","forEach","doc","push","data","id","ImageGrid","setSelectedImg","console","log","className","map","div","key","whileHover","opacity","layout","onClick","url","img","src","alt","initial","animate","transition","delay","Modal","selectedImg","event","target","classList","contains","y","Title","useStorage","file","progress","setProgress","error","setError","setUrl","storageRef","ref","name","collectionRef","put","on","percentage","bytesTransferred","totalBytes","a","getDownloadURL","createdAt","add","ProgressBar","setFile","width","UploadForm","types","type","onChange","selected","files","includes","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qPAaEA,IAASC,cATY,CACnBC,OAAQ,0CACRC,WAAY,oCACZC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,eACnBC,MAAO,8CAMT,IAAMC,EAAiBR,IAASS,UAG1BC,EAAmBV,IAASW,YAG5BC,EAAYZ,IAASW,UAAUE,WAAWC,gBCCnCC,EApBM,SAACC,GAAgB,IAAD,EACXC,mBAAS,IADE,mBAC5BC,EAD4B,KACtBC,EADsB,KAiBnC,OAdAC,qBAAU,WACR,IAAMC,EAAQX,EAAiBM,WAAWA,GACvCM,QAAQ,YAAa,QACrBC,YAAW,SAACC,GACX,IAAIC,EAAY,GAChBD,EAAKE,SAAQ,SAAAC,GACXF,EAAUG,KAAV,2BAAmBD,EAAIE,QAAvB,IAA+BC,GAAIH,EAAIG,SAEzCX,EAAQM,MAGV,OAAO,kBAAMJ,OACd,CAACL,IAEG,CAAEE,S,OCMIa,EAtBG,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,eACXd,EAASH,EAAa,UAAtBG,KAGR,OAFAe,QAAQC,IAAIhB,GAGV,yBAAKiB,UAAU,YACXjB,GAAQA,EAAKkB,KAAI,SAAAT,GAAG,OACpB,kBAAC,IAAOU,IAAR,CAAYF,UAAU,WAAWG,IAAKX,EAAIG,GACxCS,WAAY,CAAEC,QAAS,GACvBC,QAAM,EACNC,QAAS,kBAAMV,EAAeL,EAAIgB,OAElC,kBAAC,IAAOC,IAAR,CAAYC,IAAKlB,EAAIgB,IAAKG,IAAI,cAC5BC,QAAS,CAAEP,QAAS,GACpBQ,QAAS,CAAER,QAAS,GACpBS,WAAY,CAAEC,MAAO,WCIlBC,EApBD,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,YAAapB,EAAqB,EAArBA,eAO5B,OACE,kBAAC,IAAOK,IAAR,CAAYF,UAAU,WAAWO,QAPf,SAACW,GACfA,EAAMC,OAAOC,UAAUC,SAAS,aAClCxB,EAAe,OAMfe,QAAS,CAAEP,QAAS,GACpBQ,QAAS,CAAER,QAAS,IAEpB,kBAAC,IAAOI,IAAR,CAAYC,IAAKO,EAAaN,IAAI,YAChCC,QAAS,CAAEU,EAAG,UACdT,QAAS,CAAES,EAAG,OCLPC,EAVD,WACZ,OACE,yBAAKvB,UAAU,SACb,wCACA,6CACA,yF,yBCsBSwB,EA1BI,SAACC,GAAU,IAAD,EACK3C,mBAAS,GADd,mBACpB4C,EADoB,KACVC,EADU,OAED7C,mBAAS,MAFR,mBAEpB8C,EAFoB,KAEbC,EAFa,OAGL/C,mBAAS,MAHJ,mBAGpB0B,EAHoB,KAGfsB,EAHe,KAuB3B,OAlBA7C,qBAAU,WAER,IAAM8C,EAAa1D,EAAe2D,IAAIP,EAAKQ,MACrCC,EAAgB3D,EAAiBM,WAAW,UAElDkD,EAAWI,IAAIV,GAAMW,GAAG,iBAAiB,SAAC/C,GACxC,IAAIgD,EAAchD,EAAKiD,iBAAmBjD,EAAKkD,WAAc,IAC7DZ,EAAYU,MACX,SAACT,GACFC,EAASD,KAJX,sBAKG,8BAAAY,EAAA,sEACiBT,EAAWU,iBAD5B,OACKjC,EADL,OAEKkC,EAAYjE,IAClByD,EAAcS,IAAI,CAAEnC,MAAKkC,cACzBZ,EAAOtB,GAJN,8CAMF,CAACiB,IAEG,CAAEC,WAAUlB,MAAKoB,UCLXgB,EAjBK,SAAC,GAAuB,IAArBnB,EAAoB,EAApBA,KAAMoB,EAAc,EAAdA,QAAc,EACfrB,EAAWC,GAA7BjB,EADiC,EACjCA,IAAKkB,EAD4B,EAC5BA,SAQb,OANAzC,qBAAU,WACJuB,GACFqC,EAAQ,QAET,CAACrC,EAAKqC,IAGP,kBAAC,IAAO3C,IAAR,CAAYF,UAAU,eACpBY,QAAS,CAAEkC,MAAO,GAClBjC,QAAS,CAAEiC,MAAOpB,EAAW,QCmBpBqB,EAhCI,WAAO,IAAD,EACCjE,mBAAS,MADV,mBAChB2C,EADgB,KACVoB,EADU,OAEG/D,mBAAS,MAFZ,mBAEhB8C,EAFgB,KAETC,EAFS,KAIjBmB,EAAQ,CAAC,YAAa,cAa5B,OACE,8BACE,+BACE,2BAAOC,KAAK,OAAOC,SAdJ,SAAChC,GACpB,IAAIiC,EAAWjC,EAAMC,OAAOiC,MAAM,GAC9BD,GAAYH,EAAMK,SAASF,EAASF,OACtCJ,EAAQM,GACRtB,EAAS,MAETgB,EAAQ,MACRhB,EAAS,0CAQP,oCAEF,yBAAK7B,UAAU,UACX4B,GAAS,yBAAK5B,UAAU,SAAU4B,GAClCH,GAAQ,6BAAOA,EAAKQ,MACpBR,GAAQ,kBAAC,EAAD,CAAaA,KAAMA,EAAMoB,QAASA,OCXrCS,MAZf,WAAgB,IAAD,EACyBxE,mBAAS,MADlC,mBACNmC,EADM,KACOpB,EADP,KAEb,OACE,yBAAKG,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWH,eAAgBA,IACzBoB,GAAe,kBAAC,EAAD,CAAOA,YAAaA,EAAapB,eAAgBA,MCRxE0D,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.1fe2f60f.chunk.js","sourcesContent":["  import firebase from \"firebase/app\";\n  import \"firebase/storage\";\n  import \"firebase/firestore\";\n  // Your web app's Firebase configuration\n  var firebaseConfig = {\n    apiKey: \"AIzaSyDnXTrk3v2HRzmmPzfAPiuHfNXuG_BymtM\",\n    authDomain: \"tomo-photogallery.firebaseapp.com\",\n    projectId: \"tomo-photogallery\",\n    storageBucket: \"tomo-photogallery.appspot.com\",\n    messagingSenderId: \"383026762058\",\n    appId: \"1:383026762058:web:6bd1d765e427688db5f1b3\"\n  };\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n\n  //initialize Storage\n  const projectStorage = firebase.storage();\n\n  //initialize database\n  const projectFirestore = firebase.firestore();\n\n  //timestamp\n  const timestamp = firebase.firestore.FieldValue.serverTimestamp;\n\n  export { projectStorage, projectFirestore, timestamp };","import { useState, useEffect } from \"react\";\nimport { projectFirestore } from \"../firebase/config\";\n\nconst useFirestore = (collection) => {\n  const [docs, setDocs] = useState([]);\n\n  useEffect(() => {\n    const unsub = projectFirestore.collection(collection)\n      .orderBy(\"createdAt\", \"desc\")\n      .onSnapshot((snap) => {\n        let documents = [];\n        snap.forEach(doc => {\n          documents.push({...doc.data(), id: doc.id})\n        });\n        setDocs(documents);\n      });\n\n      return () => unsub();\n  }, [collection])\n\n  return { docs };\n}\n\nexport default useFirestore;","import React from \"react\";\nimport useFirestore from \"../hooks/useFirestore\";\nimport { motion } from \"framer-motion\";\n\nconst ImageGrid = ({ setSelectedImg }) => {\n  const { docs } = useFirestore(\"images\");\n  console.log(docs);\n\n  return (\n    <div className=\"img-grid\">\n      { docs && docs.map(doc => (\n        <motion.div className=\"img-wrap\" key={doc.id} \n          whileHover={{ opacity: 1 }} \n          layout \n          onClick={() => setSelectedImg(doc.url)}\n        >\n          <motion.img src={doc.url} alt=\"gallery pic\" \n            initial={{ opacity: 0 }} \n            animate={{ opacity: 1 }} \n            transition={{ delay: 1 }} />\n        </motion.div>\n      ))}\n    </div>\n  )\n}\n\nexport default ImageGrid;","import React from \"react\";\nimport { motion } from \"framer-motion\";\n\nconst Modal = ({ selectedImg, setSelectedImg }) => {\n  const handleClick = (event) => {\n    if (event.target.classList.contains(\"backdrop\")) {\n      setSelectedImg(null);\n    }\n  }\n\n  return (\n    <motion.div className=\"backdrop\" onClick={handleClick}\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n    >\n      <motion.img src={selectedImg} alt=\"Large Pic\"\n        initial={{ y: \"-100vh\" }}\n        animate={{ y: 0 }}\n      />\n    </motion.div>\n  )\n}\n\nexport default Modal;","import React from 'react';\n\nconst Title = () => {\n  return (\n    <div className=\"title\">\n      <h1>FireGram</h1>\n      <h2>Your Pictures</h2>\n      <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n    </div>\n  )\n}\n\nexport default Title;","import { useState, useEffect } from \"react\";\nimport { projectStorage, projectFirestore, timestamp } from \"../firebase/config\";\n\nconst useStorage = (file) => {\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState(null);\n  const [url, setUrl] = useState(null);\n\n  useEffect(() => {\n    // References\n    const storageRef = projectStorage.ref(file.name);\n    const collectionRef = projectFirestore.collection(\"images\");\n\n    storageRef.put(file).on(\"state_changed\", (snap) => {\n      let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\n      setProgress(percentage);\n    }, (error) => {\n      setError(error);\n    }, async () => {\n      const url = await storageRef.getDownloadURL();\n      const createdAt = timestamp();\n      collectionRef.add({ url, createdAt });\n      setUrl(url);\n    })\n  }, [file]);\n\n  return { progress, url, error }\n}\n\nexport default useStorage;","import React, { useEffect } from \"react\";\nimport useStorage from \"../hooks/useStorage\";\nimport { motion } from \"framer-motion\";\n\nconst ProgressBar = ({ file, setFile }) => {\n  const { url, progress } = useStorage(file);\n  \n  useEffect(() => {\n    if (url) {\n      setFile(null);\n    }\n  }, [url, setFile])\n\n  return (\n    <motion.div className=\"progress-bar\"\n      initial={{ width: 0 }}\n      animate={{ width: progress + \"%\" }}\n    ></motion.div>\n  )\n}\n\nexport default ProgressBar;","import React, { useState } from \"react\";\nimport ProgressBar from \"./ProgressBar\";\n\nconst UploadForm = () => {\n  const [file, setFile] = useState(null);\n  const [error, setError] = useState(null);\n\n  const types = [\"image/png\", \"image/jpeg\"];\n\n  const handleChange = (event) => {\n    let selected = event.target.files[0];\n    if (selected && types.includes(selected.type)) {\n      setFile(selected);\n      setError(\"\");\n    } else {\n      setFile(null);\n      setError(\"Select an image file (png or jpeg)\");\n    }\n  }\n\n  return (\n    <form>\n      <label>\n        <input type=\"file\" onChange={handleChange} />\n        <span>+</span>\n      </label>\n      <div className=\"output\">\n        { error && <div className=\"error\">{ error }</div> }\n        { file && <div>{ file.name }</div> }\n        { file && <ProgressBar file={file} setFile={setFile} /> }\n      </div>\n    </form>\n  )\n}\n\nexport default UploadForm;","import React, { useState } from 'react';\nimport ImageGrid from './comps/ImageGrid';\nimport Modal from './comps/Modal';\nimport Title from './comps/Title';\nimport UploadForm from './comps/UploadForm';\n\nfunction App() {\n  const [selectedImg, setSelectedImg] = useState(null);\n  return (\n    <div className=\"App\">\n      <Title/>\n      <UploadForm />\n      <ImageGrid setSelectedImg={setSelectedImg}/>\n      { selectedImg && <Modal selectedImg={selectedImg} setSelectedImg={setSelectedImg} /> }\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}